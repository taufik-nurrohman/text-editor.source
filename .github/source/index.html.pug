extends _index.pug

block state
  - const title = 'Text Editor Source ' + version
  - const scripts = ['../text-editor/index.min.js', '../text-editor.history/index.min.js', 'index.min.js']

block script
  script
    | Object.assign(TE.prototype, TE.History.that, TE.Source.that);
    |
    | let editor = new TE(document.querySelector('textarea'), '  '),
    |     {canKeyDown: canKeyDownSource, canKeyDownDent: canKeyDownDentSource, canKeyDownEnter: canKeyDownEnterSource, canKeyDownHistory: canKeyDownHistorySource, canKeyDownMove: canKeyDownMoveSource, canKeyUp: canKeyUpSource} = TE.Source;
    |
    | Object.assign(editor.state, TE.Source.state);
    |
    | function onKeyDown(e) {
    |     let key = e.key,
    |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
    |     canKeyDownSource(key, keys, editor) &&
    |     canKeyDownDentSource(key, keys, editor) &&
    |     canKeyDownEnterSource(key, keys, editor) &&
    |     canKeyDownHistorySource(key, keys, editor) &&
    |     canKeyDownMoveSource(key, keys, editor) ||
    |     e.preventDefault();
    | }
    |
    | function onKeyUp(e) {
    |     let key = e.key,
    |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
    |     canKeyUpSource(key, keys, editor) || e.preventDefault();
    | }
    |
    | function letSourceEditor() {
    |     editor.self.classList.remove('source');
    |     editor.self.removeEventListener('keydown', onKeyDown);
    |     editor.self.removeEventListener('keyup', onKeyUp);
    |     editor.loss(true); // Remove all history data
    | }
    |
    | function setSourceEditor() {
    |     editor.self.classList.add('source');
    |     editor.self.addEventListener('keydown', onKeyDown, false);
    |     editor.self.addEventListener('keyup', onKeyUp, false);
    |     editor.record(); // Record the first history data
    | }
    |
    | setSourceEditor();

block style
  style
    | * {
    |   box-sizing: border-box;
    | }
    | :root {
    |   background: #fff;
    |   color: #000;
    |   border-top: 4px solid;
    |   font: normal normal 16px/1.25 serif;
    |   position: relative;
    | }
    | a {
    |   color: #009;
    |   text-decoration: none;
    | }
    | a, code {
    |   word-wrap: break-word;
    | }
    | code {
    |   font-family: monospace;
    |   font-size: 80%;
    | }
    | footer, header, main, nav {
    |   max-width: 700px;
    |   margin: 0 auto;
    | }
    | hr {
    |   border: 0;
    |   color: inherit;
    |   border-top: 1px dashed;
    |   height: 0;
    | }
    | mark {
    |   display: inline-block;
    |   vertical-align: middle;
    |   height: 1.25em;
    |   background: #ff0;
    |   border: 1px solid #f00;
    |   min-width: 3px;
    | }
    | pre {
    |   white-space: pre-wrap;
    |   word-wrap: break-word;
    | }
    | pre code {
    |   display: block;
    |   background: #eee;
    |   padding: 1em;
    | }
    | table {
    |   width: 100%;
    | }
    | td, th {
    |   text-align: left;
    |   vertical-align: top;
    | }
    | textarea {
    |   display: block;
    |   width: 100%;
    |   height: 20em;
    | }
    | .source {
    |   background: #ccc;
    |   color: #000;
    |   border: 1px solid #000;
    |   padding: 2px;
    | }

block content
  header
    h1= title
    p Source code editor extension for #[a(href='../text-editor/index.html') text editor].
    hr
    p Provides a set of key strokes to generate responses like in a typical source code editor.
  main
    p(tabindex='0') Previous tabbable element.
    p: textarea(placeholder!='Code goes here&hellip;' spellcheck='false')
    p: button(onclick='editor.toggle(\'"\').record();') Toggle Test
    p
      label
        input(checked onchange='this.checked ? setSourceEditor() : letSourceEditor();' type='checkbox')
        = ' '
        span Enable Source Editor
    h2 Features
    ul
      li <code>(<mark>asdf</mark>)</code>, <code>[<mark>asdf</mark>]</code>, <code>{<mark>asdf</mark>}</code>, <code>'<mark>asdf</mark>'</code>, <code>"<mark>asdf</mark>"</code>, or <code>&lt;<mark>asdf</mark>&gt;</code>, then press <kbd>⌫</kbd>.
      li <code>(<mark></mark>)</code>, <code>[<mark></mark>]</code>, <code>{<mark></mark>}</code>, <code>'<mark></mark>'</code>, <code>"<mark></mark>"</code>, or <code>&lt;<mark></mark>&gt;</code> then press <kbd>↵</kbd>.
      li <code>(<mark></mark>)</code>, <code>[<mark></mark>]</code>, <code>{<mark></mark>}</code>, <code>'<mark></mark>'</code>, <code>"<mark></mark>"</code>, or <code>&lt;<mark></mark>&gt;</code> then press <kbd>⌫</kbd>.
      li <code>(<mark></mark>)</code>, <code>[<mark></mark>]</code>, <code>{<mark></mark>}</code>, <code>'<mark></mark>'</code>, <code>"<mark></mark>"</code>, or <code>&lt;<mark></mark>&gt;</code> then press <kbd>␣</kbd>.
      li <code><mark>asdf</mark></code> then press <kbd>(</kbd>, <kbd>[</kbd>, <kbd>{</kbd>, <kbd>'</kbd>, <kbd>"</kbd>, or <kbd>&lt;</kbd>.
      li <code><mark>asdf</mark></code> then press <kbd>)</kbd>, <kbd>]</kbd>, <kbd>}</kbd>, or <kbd>&gt;</kbd>.
      li <code><mark>asdf</mark> asdf</code>, then press <kbd>⌘</kbd><kbd></kbd><kbd>⌥</kbd><kbd>→</kbd>.
      li <code><mark>asdf</mark> asdf</code>, then press <kbd>⌘</kbd><kbd>→</kbd>.
      li <code>as<mark></mark>df</code> or <code><mark>asdf</mark></code>, then press <kbd>⌘</kbd><kbd>↑</kbd>.
      li <code>as<mark></mark>df</code> or <code><mark>asdf</mark></code>, then press <kbd>⌘</kbd><kbd>↓</kbd>.
      li <code>as<mark></mark>df</code> or <code><mark>asdf</mark></code>, then press <kbd>⌘</kbd><kbd>↵</kbd>.
      li <code>as<mark></mark>df</code> or <code><mark>asdf</mark></code>, then press <kbd>⌘</kbd><kbd>⇧</kbd><kbd>↵</kbd>.
      li <code>asdf <mark>asdf</mark></code>, then press <kbd>⌘</kbd><kbd>←</kbd>.
      li <code>asdf <mark>asdf</mark></code>, then press <kbd>⌘</kbd><kbd>⌥</kbd><kbd>←</kbd>.
      li Press <kbd>(</kbd>, <kbd>[</kbd>, <kbd>{</kbd>, <kbd>'</kbd>, <kbd>"</kbd>, or <kbd>&lt;</kbd>.
      li Press <kbd>⇥</kbd> to indent via <code>onKeyDownTab</code>.
      li Press <kbd>⇧</kbd><kbd>⇥</kbd> to outdent via <code>onKeyDownTab</code>.
      li Press <kbd>⌘</kbd><kbd>[</kbd> to outdent via <code>onKeyDownDent</code>.
      li Press <kbd>⌘</kbd><kbd>]</kbd> to indent via <code>onKeyDownDent</code>.
      li Press <kbd>⌘</kbd><kbd>y</kbd> to redo via <code>onKeyDownHistory</code>.
      li Press <kbd>⌘</kbd><kbd>z</kbd> to undo via <code>onKeyDownHistory</code>.
    h2 Usage
    h4 Browser
    pre: code
      | &lt;script src="#[a(href='../text-editor/index.min.js' target='_blank') ./text-editor/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.history/index.min.js' target='_blank') ./text-editor.history/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='index.min.js' target='_blank') ./text-editor.source/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script&gt;
      |
      | Object.assign(TE.prototype, TE.History.that, TE.Source.that);
      |
      | const editor = new TE(document.querySelector('textarea'));
      |
      | const {
      |     canKeyDown: canKeyDownSource,
      |     canKeyDownEnter: canKeyDownEnterSource,
      |     canKeyDownHistory: canKeyDownHistorySource,
      |     canKeyDownMove: canKeyDownMoveSource,
      |     canKeyDownTab: canKeyDownTabSource,
      |     canKeyUp: canKeyUpSource
      | } = TE.Source;
      |
      | Object.assign(editor.state, TE.Source.state);
      |
      | editor.self.addEventListener('keydown', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     if (
      |         canKeyDownSource(key, keys, editor) &amp;&amp;
      |         canKeyDownEnterSource(key, keys, editor) &amp;&amp;
      |         canKeyDownHistorySource(key, keys, editor) &amp;&amp;
      |         canKeyDownMoveSource(key, keys, editor) &amp;&amp;
      |         canKeyDownTabSource(key, keys, editor)
      |     ) {
      |         // Normal key strokes. Add more key strokes extension here!
      |     } else {
      |         e.preventDefault();
      |     }
      | });
      |
      | editor.self.addEventListener('keyup', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     canKeyUpSource(key, keys, editor) || e.preventDefault();
      | });
      |
      | editor.record(); // Record the first history data
      |
      | &lt;/script&gt;
    h4 CommonJS
    pre: code
      | const TE = require('@taufik-nurrohman/text-editor');
      | const {that: thatHistory} = require('@taufik-nurrohman/text-editor.history');
      |
      | const {
      |     canKeyDown: canKeyDownSource,
      |     canKeyDownEnter: canKeyDownEnterSource,
      |     canKeyDownHistory: canKeyDownHistorySource,
      |     canKeyDownMove: canKeyDownMoveSource,
      |     canKeyDownTab: canKeyDownTabSource,
      |     canKeyUp: canKeyUpSource,
      |     state: stateSource,
      |     that: thatSource
      | } = require('@taufik-nurrohman/text-editor.source');
      |
      | Object.assign(TE.prototype, thatHistory, thatSource);
      |
      | const editor = new TE(document.querySelector('textarea'));
      |
      | Object.assign(editor.state, stateSource);
      |
      | editor.self.addEventListener('keydown', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     if (
      |         canKeyDownSource(key, keys, editor) &amp;&amp;
      |         canKeyDownEnterSource(key, keys, editor) &amp;&amp;
      |         canKeyDownHistorySource(key, keys, editor) &amp;&amp;
      |         canKeyDownMoveSource(key, keys, editor) &amp;&amp;
      |         canKeyDownTabSource(key, keys, editor)
      |     ) {
      |         // Normal key strokes. Add more key strokes extension here!
      |     } else {
      |         e.preventDefault();
      |     }
      | });
      |
      | editor.self.addEventListener('keyup', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     canKeyUpSource(key, keys, editor) || e.preventDefault();
      | });
      |
      | editor.record();
    h4 ECMAScript
    pre: code
      | import TE from '@taufik-nurrohman/text-editor';
      | import {that as thatHistory} from '@taufik-nurrohman/text-editor.history';
      |
      | import {
      |     canKeyDown as canKeyDownSource,
      |     canKeyDownEnter as canKeyDownEnterSource,
      |     canKeyDownHistory as canKeyDownHistorySource,
      |     canKeyDownMove as canKeyDownMoveSource,
      |     canKeyDownTab as canKeyDownTabSource,
      |     canKeyUp as canKeyUpSource,
      |     state as stateSource,
      |     that as thatSource
      | } from '@taufik-nurrohman/text-editor.source';
      |
      | Object.assign(TE.prototype, thatHistory, thatSource);
      |
      | const editor = new TE(document.querySelector('textarea'));
      |
      | Object.assign(editor.state, stateSource);
      |
      | editor.self.addEventListener('keydown', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     if (
      |         canKeyDownSource(key, keys, editor) &amp;&amp;
      |         canKeyDownEnterSource(key, keys, editor) &amp;&amp;
      |         canKeyDownHistorySource(key, keys, editor) &amp;&amp;
      |         canKeyDownMoveSource(key, keys, editor) &amp;&amp;
      |         canKeyDownTabSource(key, keys, editor)
      |     ) {
      |         // Normal key strokes. Add more key strokes extension here!
      |     } else {
      |         e.preventDefault();
      |     }
      | });
      |
      | editor.self.addEventListener('keyup', e =&gt; {
      |     let key = e.key,
      |         keys = {a: e.altKey, c: e.ctrlKey, s: e.shiftKey};
      |     canKeyUpSource(key, keys, editor) || e.preventDefault();
      | });
      |
      | editor.record();
    h3 Methods
    h4 editor.toggle(open, close = open, wrap = false, tidy = false)
    p Toggle wrap and peel of #[code open] and #[code close] string.
    h3 Properties
    h4 TE.Source.state
    p Return the default state to be merged with #[code editor.state].
    h3 Strokes
    p Strokes can either return #[code false] or #[code true]. If it returns #[code false], it means that this extension has manipulated the existing value. If it returns #[code true], it means that current key stroke works normally.
    h4 TE.Source.canKeyDown(key, {a, c, s}, that)
    p This will handle tasks such as automatic bracket closing and continuous indentation.
    h4 TE.Source.canKeyDownDent(key, {a, c, s}, that)
    p Strokes to handle indentation tasks using the key combination #[kbd= '⌘']#[kbd= ']'] for indent and #[kbd= '⌘']#[kbd= '['] for outdent. Use this as an alternative to #[code onKeyDownTab] so that it is possible to use the tab key normally.
    h4 TE.Source.canKeyDownEnter(key, {a, c, s}, that)
    p Strokes to handle line insertion tasks using the key combination #[kbd= '⌘']#[kbd= '↵'] and #[kbd= '⌘']#[kbd= '↵'].
    h4 TE.Source.canKeyDownHistory(key, {a, c, s}, that)
    p Strokes to handle history tasks using the key combination #[kbd= '⌘']#[kbd= 'z'] for undo and #[kbd= '⌘']#[kbd= 'y'] for redo.
    h4 TE.Source.canKeyDownMove(key, {a, c, s}, that)
    p Strokes to handle line or selection move tasks using the key combination #[kbd= '⌘']#[kbd= '←'], #[kbd= '⌘']#[kbd= '↑'], #[kbd= '⌘']#[kbd= '→'], and #[kbd= '⌘']#[kbd= '↓'].
    h4 TE.Source.canKeyDownTab(key, {a, c, s}, that)
    p Strokes to handle indentation tasks using the #[kbd= '⇥'] key for indent and #[kbd= '⇧']#[kbd= '⇥'] for outdent.
    h4 TE.Source.canKeyUp(key, {a, c, s}, that)
    p Currently only functions to update the history data as you type.
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman
