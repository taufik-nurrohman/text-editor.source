extends _index.pug

block state
  - const scripts = ['../key/index.min.js', '../text-editor/index.min.js', '../text-editor.history/index.min.js', '../text-editor.key/index.min.js', 'index.min.js']
  - const styles = ['../layout/index.min.css']
  - const theme = '#000'
  - const title = 'Text Editor Source ' + version

block script
  script
    | const editor = new TextEditor(document.querySelector('textarea'), {
    |     tab: ' '.repeat(4),
    |     with: [TextEditor.History, TextEditor.Key, TextEditor.Source]
    | });
    |
    | editor.key('Control-[', function () {
    |     return this.pull().record(), false;
    | });
    |
    | editor.key('Control-]', function () {
    |     return this.push().record(), false;
    | });
    |
    | editor.key('Control-y', function () {
    |     return this.redo(), false;
    | });
    |
    | editor.key('Control-z', function () {
    |     return this.undo(), false;
    | });

block style
  style
    | mark {
    |   border-left: 1px solid #f00;
    |   border-right: 1px solid #f00;
    | }
    |
    | mark:empty {
    |   border-right-width: 0;
    | }

block content
  header
    h1
      a(href='../text-editor/index.html') &laquo;
      = ' ' + title
    p Source extension for #[a(href='../text-editor/index.html') Text Editor]. This extension provides a set of key strokes to generate responses like in a typical source code editor.
    hr
  main
    p
      textarea(placeholder!='Code goes here&hellip;' spellcheck='false' style={
        'display': 'block',
        'width': '100%'
      })
    p(role='group')
      button(onclick='return editor.toggle(\'<b>\', \'</b>\').record(), false;') Test Toggle
    h2 Features
    ul
      li <code>(<mark></mark>)</code>, <code>[<mark></mark>]</code>, <code>{<mark></mark>}</code>, <code>'<mark></mark>'</code>, <code>"<mark></mark>"</code>, or <code>&lt;<mark></mark>&gt;</code> then press <kbd>Enter</kbd>.
      li <code>(<mark></mark>)</code>, <code>[<mark></mark>]</code>, <code>{<mark></mark>}</code>, <code>'<mark></mark>'</code>, <code>"<mark></mark>"</code>, or <code>&lt;<mark></mark>&gt;</code> then press <kbd>Backspace</kbd>.
      li <code>(<mark></mark>)</code>, <code>[<mark></mark>]</code>, <code>{<mark></mark>}</code>, <code>'<mark></mark>'</code>, <code>"<mark></mark>"</code>, or <code>&lt;<mark></mark>&gt;</code> then press <kbd>&nbsp;</kbd> (Space).
      li <code>(<mark>asdf</mark>)</code>, <code>[<mark>asdf</mark>]</code>, <code>{<mark>asdf</mark>}</code>, <code>'<mark>asdf</mark>'</code>, <code>"<mark>asdf</mark>"</code>, or <code>&lt;<mark>asdf</mark>&gt;</code>, then press <kbd>Backspace</kbd>.
      li <code><mark>asdf</mark> asdf</code>, then press <kbd>Control</kbd> + <kbd>ArrowRight</kbd>.
      li <code><mark>asdf</mark></code> then press <kbd>(</kbd>, <kbd>[</kbd>, <kbd>{</kbd>, <kbd>'</kbd>, <kbd>"</kbd>, or <kbd>&lt;</kbd>.
      li <code><mark>asdf</mark></code> then press <kbd>)</kbd>, <kbd>]</kbd>, <kbd>}</kbd>, or <kbd>&gt;</kbd>.
      li <code>as<mark></mark>df</code> or <code><mark>asdf</mark></code>, then press <kbd>Control</kbd> + <kbd>ArrowUp</kbd>.
      li <code>as<mark></mark>df</code> or <code><mark>asdf</mark></code>, then press <kbd>Control</kbd> + <kbd>ArrowDown</kbd>.
      li <code>as<mark></mark>df</code> or <code><mark>asdf</mark></code>, then press <kbd>Control</kbd> + <kbd>Enter</kbd>.
      li <code>as<mark></mark>df</code> or <code><mark>asdf</mark></code>, then press <kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>Enter</kbd>.
      li <code>asdf <mark>asdf</mark></code>, then press <kbd>Control</kbd> + <kbd>ArrowLeft</kbd>.
      li Press <kbd>(</kbd>, <kbd>[</kbd>, <kbd>{</kbd>, <kbd>'</kbd>, <kbd>"</kbd>, or <kbd>&lt;</kbd>.
    h2 Usage
    h3 Browser
    pre: code
      | &lt;script src="#[a(href='../text-editor/index.min.js' target='_blank') ./text-editor/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.history/index.min.js' target='_blank') ./text-editor.history/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.key/index.min.js' target='_blank') ./text-editor.key/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='index.min.js' target='_blank') ./text-editor.source/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script&gt;
      |
      |   const editor = new TextEditor(document.querySelector('textarea'), {
      |       tab: ' '.repeat(4),
      |       with: [TextEditor.History, TextEditor.Key, TextEditor.Source]
      |   });
      |
      |   editor.key('Control-[', function () {
      |       return this.pull().record(), false;
      |   });
      |
      |   editor.key('Control-]', function () {
      |       return this.push().record(), false;
      |   });
      |
      |   editor.key('Control-y', function () {
      |       return this.redo(), false;
      |   });
      |
      |   editor.key('Control-z', function () {
      |       return this.undo(), false;
      |   });
      |
      | &lt;/script&gt;
    h3 CommonJS
    pre: code
      | const TextEditor = require('@taufik-nurrohman/text-editor').default;
      | const TextEditorHistory = require('@taufik-nurrohman/text-editor.history').default;
      | const TextEditorKey = require('@taufik-nurrohman/text-editor.key').default;
      | const TextEditorSource = require('@taufik-nurrohman/text-editor.source').default;
      |
      | const editor = new TextEditor(document.querySelector('textarea'), {
      |     tab: ' '.repeat(4),
      |     with: [TextEditorHistory, TextEditorKey, TextEditorSource]
      | });
      |
      | editor.key('Control-[', function () {
      |     return this.pull().record(), false;
      | });
      |
      | editor.key('Control-]', function () {
      |     return this.push().record(), false;
      | });
      |
      | editor.key('Control-y', function () {
      |     return this.redo(), false;
      | });
      |
      | editor.key('Control-z', function () {
      |     return this.undo(), false;
      | });
    h3 ECMAScript
    pre: code
      | import TextEditor from '@taufik-nurrohman/text-editor';
      | import TextEditorHistory from '@taufik-nurrohman/text-editor.history';
      | import TextEditorKey from '@taufik-nurrohman/text-editor.key';
      | import TextEditorSource from '@taufik-nurrohman/text-editor.source';
      |
      | const editor = new TextEditor(document.querySelector('textarea'), {
      |     tab: ' '.repeat(4),
      |     with: [TextEditorHistory, TextEditorKey, TextEditorSource]
      | });
      |
      | editor.key('Control-[', function () {
      |     return this.pull().record(), false;
      | });
      |
      | editor.key('Control-]', function () {
      |     return this.push().record(), false;
      | });
      |
      | editor.key('Control-y', function () {
      |     return this.redo(), false;
      | });
      |
      | editor.key('Control-z', function () {
      |     return this.undo(), false;
      | });
    h2 Methods
    h3: code editor.toggle(open, close = open, wrap = false, tidy = false)
    p Toggle wrap and peel selection with #[code open] and #[code close] string.
    pre: code
      | editor.toggle('&lt;b&gt;', '&lt;/b&gt;');
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman