extends _index.pug

block state
  - const scripts = ['../text-editor/index.min.js', '../text-editor.history/index.min.js', '../text-editor.key/index.min.js', 'index.min.js']
  - const styles = ['../layout/index.min.css']
  - const theme = '#000'
  - const title = 'Text Editor Source ' + version

block script
  script
    | const editor = new TextEditor(document.querySelector('textarea'), {
    |     commands: {
    |         pull: function () {
    |             return this.pull().record(), false;
    |         },
    |         push: function () {
    |             return this.push().record(), false;
    |         },
    |         redo: function () {
    |             return this.redo(), false;
    |         },
    |         undo: function () {
    |             return this.undo(), false;
    |         }
    |     },
    |     keys: {
    |         'Control-[': 'pull',
    |         'Control-]': 'push',
    |         'Control-y': 'redo',
    |         'Control-z': 'undo'
    |     },
    |     tab: 4,
    |     with: [TextEditor.History, TextEditor.Key, TextEditor.Source]
    | });

block style
  style
    | body {
    |   margin-left: auto;
    |   margin-right: auto;
    |   max-width: 60rem;
    | }
    | mark {
    |   border-left: 1px solid #f00;
    |   border-right: 1px solid #f00;
    | }
    |
    | mark:empty {
    |   border-right-width: 0;
    | }
    | .text-editor__self {
    |   background: #ccc;
    | }

block content
  header
    hgroup
      h1
        a(href='../text-editor/index.html#extensions') &laquo;
        = ' ' + title
      p This extension provides a set of key strokes to generate responses like in a typical source code editor.
  main
    p
      label
        input(checked onchange='return editor[this.checked ? \'attach\' : \'detach\'](), false;' type='checkbox')
        = ' '
        span Enable Source Editor
    p
      textarea(placeholder!='Code goes here&hellip;' spellcheck='false' style={
        'display': 'block',
        'width': '100%'
      })
    p(role='group')
      button(onclick='return editor.toggle(\'<b>\', \'</b>\').record(), false;') Test Toggle #1
      = ' '
      button(onclick='return editor.toggle(\'<b>\', \'</b>\', true).record(), false;') Test Toggle #2
    p(role='group')
      button(onclick='return editor.toggleLine(\'<p>\', \'</p>\').record(), false;') Test Toggle Line #1
      = ' '
      button(onclick='return editor.toggleLine(\'<p>\', \'</p>\', true).record(), false;') Test Toggle Line #2
    p(role='group')
      button(onclick='return editor.selectLine(), false;') Test Select Current Line
      = ' '
      button(onclick='return editor.selectLine(false), false;') Test Select Current Line (Without the Space(s))
      = ' '
      button(onclick='return editor.insertLine((new Date).toISOString(), +1).record(), false;') Test Insert After Line
      = ' '
      button(onclick='return editor.insertLine((new Date).toISOString(), -1).record(), false;') Test Insert Before Line
      = ' '
      button(onclick='return editor.insertLine((new Date).toISOString()).record(), false;') Test Replace Current Line
    h2 Strokes
    ul
      li <code>(<mark></mark>)</code>, <code>[<mark></mark>]</code>, <code>{<mark></mark>}</code>, <code>'<mark></mark>'</code>, <code>"<mark></mark>"</code>, or <code>&lt;<mark></mark>&gt;</code> then press <kbd>Enter</kbd>.
      li <code>(<mark></mark>)</code>, <code>[<mark></mark>]</code>, <code>{<mark></mark>}</code>, <code>'<mark></mark>'</code>, <code>"<mark></mark>"</code>, or <code>&lt;<mark></mark>&gt;</code> then press <kbd>Backspace</kbd>.
      li <code>(<mark></mark>)</code>, <code>[<mark></mark>]</code>, <code>{<mark></mark>}</code>, <code>'<mark></mark>'</code>, <code>"<mark></mark>"</code>, or <code>&lt;<mark></mark>&gt;</code> then press <kbd>Space</kbd>.
      li <code>(<mark>asdf</mark>)</code>, <code>[<mark>asdf</mark>]</code>, <code>{<mark>asdf</mark>}</code>, <code>'<mark>asdf</mark>'</code>, <code>"<mark>asdf</mark>"</code>, or <code>&lt;<mark>asdf</mark>&gt;</code>, then press <kbd>Backspace</kbd>.
      li <code>(<mark>asdf</mark>)</code>, <code>[<mark>asdf</mark>]</code>, <code>{<mark>asdf</mark>}</code>, <code>'<mark>asdf</mark>'</code>, <code>"<mark>asdf</mark>"</code>, or <code>&lt;<mark>asdf</mark>&gt;</code>, then press <kbd>Delete</kbd>.
      li <code><mark>asdf</mark> asdf</code>, then press <kbd>Control</kbd> + <kbd>ArrowRight</kbd>.
      li <code><mark>asdf</mark></code> then press <kbd>(</kbd>, <kbd>[</kbd>, <kbd>{</kbd>, <kbd>'</kbd>, <kbd>"</kbd>, or <kbd>&lt;</kbd>.
      li <code><mark>asdf</mark></code> then press <kbd>)</kbd>, <kbd>]</kbd>, <kbd>}</kbd>, or <kbd>&gt;</kbd>.
      li <code>as<mark></mark>df</code> or <code><mark>asdf</mark></code>, then press <kbd>Control</kbd> + <kbd>ArrowUp</kbd>.
      li <code>as<mark></mark>df</code> or <code><mark>asdf</mark></code>, then press <kbd>Control</kbd> + <kbd>ArrowDown</kbd>.
      li <code>as<mark></mark>df</code> or <code><mark>asdf</mark></code>, then press <kbd>Control</kbd> + <kbd>Enter</kbd>.
      li <code>as<mark></mark>df</code> or <code><mark>asdf</mark></code>, then press <kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>Enter</kbd>.
      li <code>asdf <mark>asdf</mark></code>, then press <kbd>Control</kbd> + <kbd>ArrowLeft</kbd>.
      li Press <kbd>(</kbd>, <kbd>[</kbd>, <kbd>{</kbd>, <kbd>'</kbd>, <kbd>"</kbd>, or <kbd>&lt;</kbd>.
    h2 Usage
    h3 Browser
    pre: code
      | &lt;script src="#[a(href='../text-editor/index.min.js' target='_blank') ./text-editor/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.history/index.min.js' target='_blank') ./text-editor.history/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.key/index.min.js' target='_blank') ./text-editor.key/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='index.min.js' target='_blank') ./text-editor.source/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script&gt;
      |
      |   const editor = new TextEditor(document.querySelector('textarea'), {
      |       commands: {
      |           pull: function () {
      |               return this.pull().record(), false;
      |           },
      |           push: function () {
      |               return this.push().record(), false;
      |           },
      |           redo: function () {
      |               return this.redo(), false;
      |           },
      |           undo: function () {
      |               return this.undo(), false;
      |           }
      |       },
      |       keys: {
      |           'Control-[': 'pull',
      |           'Control-]': 'push',
      |           'Control-y': 'redo',
      |           'Control-z': 'undo'
      |       },
      |       tab: 4,
      |       with: [TextEditor.History, TextEditor.Key, TextEditor.Source]
      |   });
      |
      | &lt;/script&gt;
    h3 CommonJS
    pre: code
      | const TextEditor = require('@taufik-nurrohman/text-editor').default;
      | const TextEditorHistory = require('@taufik-nurrohman/text-editor.history').default;
      | const TextEditorKey = require('@taufik-nurrohman/text-editor.key').default;
      | const TextEditorSource = require('@taufik-nurrohman/text-editor.source').default;
      |
      | const editor = new TextEditor(document.querySelector('textarea'), {
      |     commands: {
      |         pull: function () {
      |             return this.pull().record(), false;
      |         },
      |         push: function () {
      |             return this.push().record(), false;
      |         },
      |         redo: function () {
      |             return this.redo(), false;
      |         },
      |         undo: function () {
      |             return this.undo(), false;
      |         }
      |     },
      |     keys: {
      |         'Control-[': 'pull',
      |         'Control-]': 'push',
      |         'Control-y': 'redo',
      |         'Control-z': 'undo'
      |     },
      |     tab: 4,
      |     with: [TextEditorHistory, TextEditorKey, TextEditorSource]
      | });
    h3 ECMAScript
    pre: code
      | import TextEditor from '@taufik-nurrohman/text-editor';
      | import TextEditorHistory from '@taufik-nurrohman/text-editor.history';
      | import TextEditorKey from '@taufik-nurrohman/text-editor.key';
      | import TextEditorSource from '@taufik-nurrohman/text-editor.source';
      |
      | const editor = new TextEditor(document.querySelector('textarea'), {
      |     commands: {
      |         pull: function () {
      |             return this.pull().record(), false;
      |         },
      |         push: function () {
      |             return this.push().record(), false;
      |         },
      |         redo: function () {
      |             return this.redo(), false;
      |         },
      |         undo: function () {
      |             return this.undo(), false;
      |         }
      |     },
      |     keys: {
      |         'Control-[': 'pull',
      |         'Control-]': 'push',
      |         'Control-y': 'redo',
      |         'Control-z': 'undo'
      |     },
      |     tab: 4,
      |     with: [TextEditorHistory, TextEditorKey, TextEditorSource]
      | });
    h2 Methods
    h3 Instance Methods
    h4: code editor.alert(hint, then)
    p Spawns an alert dialog box.
    pre: code
      | editor.alert('Hello!', function (value) {
      |     console.log(value); // Here, `value` will always be `true`
      | });
    h4: code editor.confirm(hint, then)
    p Spawns a confirmation dialog box.
    pre: code
      | editor.confirm('Are you sure?', function (value) {
      |     console.log(value); // Here, `value` can be `true` or `false`
      | });
    h4: code editor.insertLine(value, mode = 0)
    p Inserts #[var value] above/below the current line, or replace the current line with #[var value].
    pre: code
      | editor.insertLine('asdf'); // Replace the current line with `'asdf'`
      | editor.insertLine('asdf', -1); // Insert `'asdf'` above the current line
      | editor.insertLine('asdf', +1); // Insert `'asdf'` below the current line
    h4: code editor.peelLine(open, close, wrap = false, withSpaces = false)
    p Selects the current line then perform the peel command on it.
    pre: code
      | editor.peelLine('&lt;p&gt;', '&lt;/p&gt;');
    h4: code editor.prompt(hint, value, then)
    p Spawns a prompt dialog box.
    pre: code
      | editor.prompt('URL:', 'http://', function (value) {
      |     console.log(value); // Here, `value` can be the text you have submitted or `false`
      | });
    h4: code editor.selectLine(withSpaces = true)
    p Selects the current line.
    pre: code
      | editor.selectLine();
    h4: code editor.toggle(open, close, wrap = false)
    p Toggles wrap and peel selection with #[var open] and #[var close] string.
    pre: code
      | editor.toggle('&lt;b&gt;', '&lt;/b&gt;');
    h4: code editor.toggleLine(open, close, wrap = false, withSpaces = false)
    p Selects the current line then perform the toggle command on it.
    pre: code
      | editor.toggleLine('&lt;p&gt;', '&lt;/p&gt;');
    h4: code editor.wrapLine(open, close, wrap = false, withSpaces = false)
    p Selects the current line then perform the wrap command on it.
    pre: code
      | editor.wrapLine('&lt;p&gt;', '&lt;/p&gt;');
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman